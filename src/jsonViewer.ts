// Generated by Copilot
import * as vscode from 'vscode';

// Register the viewJson command for debug variables
export function registerViewJsonCommand(context: vscode.ExtensionContext): void {
    const viewJsonCommand = vscode.commands.registerCommand('jsondbg.viewJson', async (variable) => {
        // Get the active debug session
        const session = vscode.debug.activeDebugSession;
        if (!session) {
            vscode.window.showErrorMessage('No active debug session.');
            return;
        }

        try {
            let jsonValue = '';

            // Handle different ways the variable might be passed
            if (variable && variable.evaluateName) {
                // If we have an evaluate name, use it to get the value
                const response = await session.customRequest('evaluate', {
                    expression: variable.evaluateName,
                    context: 'hover'
                });
                jsonValue = response.result;
            } else if (variable && variable.value) {
                // Direct access to value (simpler case)
                jsonValue = variable.value;
            } else if (variable && variable.variable && variable.variable.value) {
                // Sometimes nested in a variable property
                jsonValue = variable.variable.value;
            } else {
                vscode.window.showErrorMessage('Cannot retrieve variable value.');
                return;
            }

            // Extract the variable name for error reporting
            let variableName = 'Unknown';
            if (variable && variable.name) {
                variableName = variable.name;
            } else if (variable && variable.variable && variable.variable.name) {
                variableName = variable.variable.name;
            }

            // If the value is enclosed in quotes (string representation), remove them
            if (jsonValue.startsWith('"') && jsonValue.endsWith('"')) {
                jsonValue = jsonValue.substring(1, jsonValue.length - 1);
                // Unescape any escaped quotes
                jsonValue = jsonValue.replace(/\\"/g, '"');
            }

            // Clean up line endings - handle both \r\n and \n
            jsonValue = jsonValue.replace(/\\r\\n|\\n|\\r/g, ' ').trim();

            try {
                // Try to parse the JSON string
                const jsonObj = JSON.parse(jsonValue);
                // Create and show the JSON viewer
                createJsonViewer(jsonObj, context.extensionUri);
            } catch (error) {
                let errorMessage = `"${variableName}" does not appear to be valid JSON`;
                if (error instanceof Error) {
                    errorMessage += `: ${error.message}`;
                }
                vscode.window.showErrorMessage(errorMessage);
            }
        } catch (error) {
            let errorMessage = 'Error processing variable';
            if (error instanceof Error) {
                errorMessage += ': ' + error.message;
            }
            vscode.window.showErrorMessage(errorMessage);
        }
    });

    context.subscriptions.push(viewJsonCommand);
}

// Function to create a WebView panel to display JSON
function createJsonViewer(jsonObj: any, extensionUri: vscode.Uri): void {
    // Create and show panel
    const panel = vscode.window.createWebviewPanel(
        'jsonViewer',
        'JSON Viewer',
        vscode.ViewColumn.One,
        {
            enableScripts: true,
            localResourceRoots: [extensionUri, vscode.Uri.joinPath(extensionUri, 'node_modules')],
            retainContextWhenHidden: true
        }
    );

    // Get URIs for local resources
    const jsonEditorJsUri = webviewUri(panel.webview, extensionUri, ['node_modules', 'jsoneditor', 'dist', 'jsoneditor.min.js']);
    const jsonEditorCssUri = webviewUri(panel.webview, extensionUri, ['node_modules', 'jsoneditor', 'dist', 'jsoneditor.min.css']);

    // Set the HTML content
    panel.webview.html = getWebviewContent(jsonObj, panel.webview, jsonEditorJsUri, jsonEditorCssUri);
}

// Helper function to get webview URI for local resources
function webviewUri(webview: vscode.Webview, extensionUri: vscode.Uri, pathList: string[]): vscode.Uri {
    return webview.asWebviewUri(vscode.Uri.joinPath(extensionUri, ...pathList));
}

// Generate the HTML content for the webview
function getWebviewContent(
    jsonObj: any, 
    webview: vscode.Webview, 
    jsonEditorUri: vscode.Uri,
    jsonEditorCssUri: vscode.Uri
): string {
    // Stringify the JSON with pretty formatting
    const jsonString = JSON.stringify(jsonObj, null, 2);

    return `<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="Content-Security-Policy" content="default-src 'none'; font-src ${webview.cspSource}; img-src ${webview.cspSource} https:; style-src ${webview.cspSource} 'unsafe-inline'; script-src ${webview.cspSource} 'unsafe-inline';">
        <title>JSON Viewer</title>
        <link href="${jsonEditorCssUri}" rel="stylesheet" type="text/css">
        <script src="${jsonEditorUri}"></script>
        <style>
            :root {
                --jsoneditor-theme-background: var(--vscode-editor-background);
                --jsoneditor-theme-text: var(--vscode-editor-foreground);
            }
            body {
                font-family: var(--vscode-font-family);
                color: var(--vscode-foreground);
                background-color: var(--vscode-editor-background);
                padding: 10px;
                margin: 0;
                height: 100vh;
                overflow: hidden;
            }
            #jsoneditor {
                height: calc(100vh - 20px);
                width: 100%;
            }
            .jsoneditor {
                border: 1px solid var(--vscode-focusBorder) !important;
            }
            /* Main menu styling */
            .jsoneditor-menu {
                background-color: var(--vscode-editorWidget-background) !important;
                border-bottom: 1px solid var(--vscode-focusBorder) !important;
            }
            /* All buttons in the toolbar */
            .jsoneditor-menu button,
            .jsoneditor-modes button,
            .jsoneditor-type-modes button {
                background-color: var(--vscode-button-background) !important;
                border: none !important;
                color: var(--vscode-button-foreground) !important;
                padding: 4px 8px !important;
                margin: 2px !important;
                border-radius: 2px !important;
            }
            /* Button hover states */
            .jsoneditor-menu button:hover,
            .jsoneditor-modes button:hover,
            .jsoneditor-type-modes button:hover {
                background-color: var(--vscode-button-hoverBackground) !important;
                cursor: pointer !important;
            }
            /* Navigation bar */
            .jsoneditor-navigation-bar {
                background: var(--vscode-editorWidget-background) !important;
                color: var(--vscode-foreground) !important;
                border: none !important;
            }
            /* Context menu */
            .jsoneditor-contextmenu {
                background-color: var(--vscode-menu-background) !important;
                border: 1px solid var(--vscode-menu-border) !important;
                box-shadow: var(--vscode-widget-shadow) !important;
            }
            .jsoneditor-contextmenu button,
            .jsoneditor-contextmenu-root button {
                background-color: transparent !important;
                color: var(--vscode-menu-foreground) !important;
                border: none !important;
                padding: 4px 8px !important;
            }
            .jsoneditor-contextmenu button:hover,
            .jsoneditor-contextmenu-root button:hover {
                background-color: var(--vscode-menu-selectionBackground) !important;
                color: var(--vscode-menu-selectionForeground) !important;
            }
            /* Search box */
            .jsoneditor-search {
                background: var(--vscode-editorWidget-background) !important;
                color: var(--vscode-input-foreground) !important;
                border: 1px solid var(--vscode-input-border) !important;
            }
            .jsoneditor-search input {
                background-color: var(--vscode-input-background) !important;
                color: var(--vscode-input-foreground) !important;
                border: 1px solid var(--vscode-input-border) !important;
            }
            /* Mode selector text */
            .jsoneditor-modes,
            .jsoneditor-type-modes {
                color: var(--vscode-foreground) !important;
            }
        </style>
    </head>
    <body>
        <div id="jsoneditor"></div>
        <script>
            // Fix for browser compatibility
            if (typeof acquireVsCodeApi !== 'undefined') {
                const vscode = acquireVsCodeApi();
            }
            
            // The JSON data
            const jsonObj = ${jsonString};
            
            // Create the editor
            const container = document.getElementById('jsoneditor');
            const options = {
                mode: 'view',
                modes: ['view', 'form', 'code', 'tree', 'text'],
                navigationBar: true,
                statusBar: false,
                mainMenuBar: true,
                enableSort: false,
                enableTransform: false,
            };
            const editor = new JSONEditor(container, options, jsonObj);
        </script>
    </body>
    </html>`;
}

// Generated by Copilot
import * as path from 'path';
import Mocha from 'mocha';  // Use default import instead of namespace import
// Use require for glob to avoid TypeScript import issues// Import the function directly, not as namespace
const globModule = require('glob');

export function run(): Promise<void> {
    // Create the mocha test
    const mocha = new Mocha({
        ui: 'tdd',
        color: true,
        timeout: 10000  // Increase timeout for extension activation
    });

    const testsRoot = path.resolve(__dirname, '..');

    return new Promise<void>((c, e) => {
        - use promisified glob pattern
        // Find all test files using require pattern
        globModule('**/**.test.js', { cwd: testsRoot }, (err: Error | null, files: string[]) => {
            s => {
                if (err) {o the test suite
                    return e(err); files.forEach((f: string) => mocha.addFile(path.resolve(testsRoot, f)));
                }

                // Add files to the test suite
                files.forEach((f: string) => mocha.addFile(path.resolve(testsRoot, f))); mocha.run((failures: number) => {
                    if (failures > 0) {
                        try { or(`${failures} tests failed.`));
                // Run the mocha test
                mocha.run((failures: number) => {
                    if (failures > 0) {
                        e(new Error(`${failures} tests failed.`));
                    } else {) {
                    c(); onsole.error('Error running tests:', err);
                } e(err instanceof Error ? err : new Error(String(err)));
            });
    } catch (err) {
        console.error('Error running tests:', err);
        e(err instanceof Error ? err : new Error(String(err))); console.error("Error finding test files:", err);
    } e(err);
});     });
    });   });
}}

